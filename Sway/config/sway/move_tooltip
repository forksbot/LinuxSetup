#!/usr/bin/python3

import asyncio
import sys
import swayipc


app_id = 'waybar'
match = {
	'app_id': app_id,
	'type': 'floating_con',
}
app_match_string = "[app_id=\"{}\" floating]".format(app_id)

target_x = 'cursor'
# 0 = Left, 0.5 = Middle, 1 = Right
align_x = 0.5

target_y = 1061
# 0 = Top, 0.5 = Middle, 1 = Bottom
align_y = 1


def tree_to_list(tree):
	nodes = [tree]
	if 'nodes' in tree:
		add_nodes(tree['nodes'], nodes)
	if 'floating_nodes' in tree:
		add_nodes(tree['floating_nodes'], nodes)
	return nodes

def add_nodes(tree, nodes):
	for node in tree:
		nodes.append(node)
		if 'nodes' in node:
			add_nodes(node['nodes'], nodes)
		if 'floating_nodes' in node:
			add_nodes(node['floating_nodes'], nodes)

async def main():

	await swayipc.run_command("{} move position cursor".format(app_match_string))

	tree = await swayipc.get_tree()
	nodes = tree_to_list(tree)
	for n in nodes:
		for key, val in match.items():
			if key not in n:
				break
			if n[key] != val:
				break
		else:
			commands = []

			width = n['geometry']['width']
			x = n['rect']['x']
			left = int(-width/2)
			if target_x != 'cursor':
				left = (x - target_x)
			left += (width * align_x)
			if left > 0:
				commands.append("{} move left {}".format(app_match_string, left))
			else:
				commands.append("{} move right {}".format(app_match_string, -left))

			height = n['geometry']['height']
			y = n['rect']['y']
			up = int(-height/2)
			if target_y != 'cursor':
				up = (y - target_y)
			up += (height * align_y)
			if up > 0:
				commands.append("{} move up {}".format(app_match_string, up))
			else:
				commands.append("{} move down {}".format(app_match_string, -up))

			command = ' ; '.join(commands)
			print(command)
			res = await swayipc.run_command(command)
			print(res)


asyncio.run(main())
