#!/usr/bin/python3

import atexit
import json
import os
import subprocess
import asyncio
import sys


socket = os.environ['SWAYSOCK']

magic_string = 'i3-ipc'

message_types = {
	'RUN_COMMAND': 0,
	'GET_WORKSPACES': 1,
	'SUBSCRIBE': 2,
	'GET_OUTPUTS': 3,
	'GET_TREE': 4,
	'GET_MARKS': 5,
	'GET_BAR_CONFIG': 6,
	'GET_VERSION': 7,
	'GET_BINDING_MODES': 8,
	'GET_CONFIG': 9,
	'SEND_TICK': 10,
	'SYNC': 11,
	'GET_INPUTS': 100,
	'GET_SEATS': 101,
}

workspace_rules = {
	'1': { 'scale': 2 },
	'2': { 'scale': 2 },
	'3': { 'scale': 2 },
	'4': { 'scale': 2 },
	'5': { 'scale': 2 },
	'6': { 'scale': 2 },
	'7': { 'scale': 2 },
	'8': { 'scale': 2 },
	'9': { 'scale': 2 },
	'10': { 'scale': 2 },
	'Game': { 'scale': 1 },
}


async def send_command(message_type, command=''):
	payload_type = message_types[message_type.upper()]
	payload_length = len(command)

	data = magic_string.encode('utf-8')
	data += payload_length.to_bytes(4, sys.byteorder)
	data += payload_type.to_bytes(4, sys.byteorder)
	data += command.encode('utf-8')

	(reader, writer) = await asyncio.open_unix_connection(path=socket)
	writer.write(data)
	await writer.drain()
	return reader

async def run_command(message_type, command=''):
	reader = await send_command(message_type, command)
	header = await reader.read(len(magic_string) + 8)
	size = int.from_bytes(header[len(magic_string) : len(magic_string) + 4], sys.byteorder)
	response = (await reader.read(size)).decode('utf-8')

	return response

async def get_outputs():
	return sorted(json.loads(await run_command("get_outputs")), key = lambda o : o['rect']['x'])

def cleanup(proc):
	proc.terminate()

async def main():
	outputs_info = await get_outputs()
	outputs = [output['name'] for output in outputs_info]

	# Kill other running instances
	#pids = run_command("pgrep -f \"python3 .*/workspace_rules\"").split("\n")
	#pids.remove(str(os.getpid()))
	#for pid in pids:
	#	run_command("kill {}".format(pid))

	# Start swaymsg monitor as a subprocess, to listen to workspace events
	proc = subprocess.Popen("swaymsg -t subscribe \"['workspace']\" -m", 
		shell=True, 
		stdout=subprocess.PIPE, 
		stderr=subprocess.PIPE,
		universal_newlines=True,
		bufsize=1)
	atexit.register(cleanup, proc)

	# Get events from subprocess
	while proc.poll() is None:
		event = json.loads(proc.stdout.readline())

		# Skip events that aren't focus events
		if event['change'] != 'focus':
			continue

		workspace = event['current']
		name = workspace['name']
		rules = workspace_rules[name]
		output = workspace['output']
		output_i = outputs.index(output)

		# Scale output
		scale = rules['scale']
		await run_command("run_command", "output {} scale {}".format(output, scale))

		# Re-position all outputs to right of the output that was rescaled
		if output_i + 1 < len(outputs):
			outputs_info = await get_outputs()
			outputs_width = [o['rect']['width'] for o in outputs_info]
			for i in range(output_i + 1, len(outputs)):
				output_x = sum(outputs_width[0 : i])
				if output_x > 0:
					await run_command("run_command", "output {} position {} 0".format(outputs[i], round(output_x)))

asyncio.run(main())
