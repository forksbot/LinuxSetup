#!/usr/bin/python3

import json
import subprocess


def run_command(command):
	result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	return result.stdout.decode('utf-8').rstrip("\n")

def get_outputs():
	return sorted(json.loads(run_command("swaymsg -t get_outputs")), key = lambda o : o['rect']['x'])


workspace_rules = {
	'1': { 'output': 0, 'scale': 2 },
	'2': { 'output': 1, 'scale': 2 },
	'3': { 'output': 0, 'scale': 2 },
	'4': { 'output': 1, 'scale': 2 },
	'5': { 'output': 0, 'scale': 2 },
	'6': { 'output': 1, 'scale': 2 },
	'7': { 'output': 0, 'scale': 2 },
	'8': { 'output': 1, 'scale': 2 },
	'9': { 'output': 0, 'scale': 2 },
	'10': { 'output': 1, 'scale': 2 },
	'Game': { 'output': 0, 'scale': 1 },
}

outputs_info = get_outputs()
outputs = [output['name'] for output in outputs_info]

workspaces = json.loads(run_command("swaymsg -t get_workspaces"))
for workspace in workspaces:
	if workspace['focused']:
		name = workspace['name']
		rules = workspace_rules[name]

		# Move workspace to output
		output_i = rules['output']
		output = outputs[output_i]
		run_command("swaymsg \"move workspace to output {}\"".format(output))

		# Scale output
		scale = rules['scale']
		run_command("swaymsg \"output {} scale {}\"".format(output, scale))

		# Re-position all outputs to right of the output that was rescaled
		if output_i + 1 < len(outputs):
			outputs_info = get_outputs()
			for i in range(output_i + 1, len(outputs)):
				outputs_width = [o['rect']['width'] for o in outputs_info]
				output_x = sum(outputs_width[0 : i])
				run_command("swaymsg \"output {} position {} 0\"".format(outputs[i], round(output_x)))
		
		break
