#!/usr/bin/python3

import atexit
import json
import os
import subprocess


def run_command(command):
	result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	return result.stdout.decode('utf-8').rstrip("\n")

def get_outputs():
	return sorted(json.loads(run_command("swaymsg -t get_outputs")), key = lambda o : o['rect']['x'])

def cleanup(proc):
	proc.terminate()


workspace_rules = {
	'1': { 'scale': 2 },
	'2': { 'scale': 2 },
	'3': { 'scale': 2 },
	'4': { 'scale': 2 },
	'5': { 'scale': 2 },
	'6': { 'scale': 2 },
	'7': { 'scale': 2 },
	'8': { 'scale': 2 },
	'9': { 'scale': 2 },
	'10': { 'scale': 2 },
	'Game': { 'scale': 1 },
}

outputs_info = get_outputs()
outputs = [output['name'] for output in outputs_info]

# Kill other running instances
pids = run_command("pgrep -f \"python3 .*/workspace_rules\"").split("\n")
pids.remove(str(os.getpid()))
for pid in pids:
	run_command("kill {}".format(pid))

# Start swaymsg monitor as a subprocess, to listen to workspace events
proc = subprocess.Popen("swaymsg -t subscribe \"['workspace']\" -m", 
	shell=True, 
	stdout=subprocess.PIPE, 
	stderr=subprocess.PIPE,
	universal_newlines=True,
	bufsize=1)
atexit.register(cleanup, proc)

# Get events from subprocess
while proc.poll() is None:
	event = json.loads(proc.stdout.readline())

	# Skip events that aren't focus events
	if event['change'] != 'focus':
		continue

	workspace = event['current']
	name = workspace['name']
	rules = workspace_rules[name]
	output = workspace['output']
	output_i = outputs.index(output)

	# Scale output
	scale = rules['scale']
	run_command("swaymsg \"output {} scale {}\"".format(output, scale))

	# Re-position all outputs to right of the output that was rescaled
	if output_i + 1 < len(outputs):
		outputs_info = get_outputs()
		outputs_width = [o['rect']['width'] for o in outputs_info]
		for i in range(output_i + 1, len(outputs)):
			output_x = sum(outputs_width[0 : i])
			if output_x > 0:
				run_command("swaymsg \"output {} position {} 0\"".format(outputs[i], round(output_x)))
